<!-- cuid: 4488495 | cid: 6200738 | bid: 18774479 | version: ! | #28598078 | 2025-09-05 10:47:27 -->
<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset=utf-8>
  <meta name=viewport content="width=device-width,initial-scale=1">
  <title>Param√®tres des cookies requis</title>
  <style type="text/css">
    html,
    body {
      width: 100%;
      height: 100%;
    }

    * {
      font-family: 'Droid Sans', sans-serif !important;
    }
    /* banner */
    a:-webkit-any-link:focus {
      outline: 1px solid #2269C3 !important;
    }

    :focus {
      outline: 1px solid #2269C3 !important;
    }

    #onetrust-consent-sdk #onetrust-policy-title {
      font-size: 1.4rem !important;
      margin-top: 20px !important;
      padding-bottom: 15px !important;
    }

    #onetrust-banner-sdk #onetrust-policy {
      border-bottom: 1px solid #e9e9e9 !important;
      margin-top: 10px !important;
    }

    #onetrust-banner-sdk #onetrust-policy .banner-header, #onetrust-pc-sdk .ot-pc-logo {
      height: 40px !important;
      width: 120px !important;
      margin-bottom: 10px !important;
      background-size: contain !important;
      background-repeat: no-repeat !important;
    }

    #ot-sdk-btn-floating.ot-floating-button {
      display: none !important;
    }

    #onetrust-banner-sdk a, #onetrust-pc-sdk a, #ot-sdk-cookie-policy a {
      text-decoration: none !important;
    }

    /* preference center */
    #onetrust-pc-sdk .ot-pc-footer-logo {
      display: none !important;
    }

    #onetrust-pc-sdk .ot-cat-grp .ot-always-active {
      color: #2269C3 !important;
    }

    #onetrust-pc-sdk .ot-fltr-cntr {
      display: none !important;
    }

    div[data-optanongroupid="IFE2V2_1"] .ot-always-active, div[data-optanongroupid="IFE2V2_2"] .ot-always-active, div[data-optanongroupid="IFE2V2_3"] .ot-always-active {
      display: none !important;
    }

    div[data-optanongroupid="BG8"], li[data-optanongroupid="BG9"], div[data-optanongroupid="BG9"], div[data-optanongroupid="BG41"], div[data-optanongroupid="C0001"], div[data-optanongroupid="C0002"], div[data-optanongroupid="C0004"] {
      display: none !important;
    }

    #onetrust-pc-sdk #ot-pc-content {
      bottom: 130px !important;
      bottom: 130px !important;
    }

    .ot-always-active {
      right: 15px !important;
    }

    #onetrust-banner-sdk #onetrust-policy-text a {
      font-weight: bold;
      margin-left: 5px;
    }

    #onetrust-pc-sdk #ot-pc-desc a {
      margin-left: 0px !important;
    }

    a.category-vendors-list-handler {
      float: initial !important;
      font-size: .813em !important;
    }

    button.ot-link-btn.category-vendors-list-handler, button.ot-link-btn.category-host-list-handler {
      font-size: revert !important;
    }
    
    /* gmx specific css */
    #onetrust-banner-sdk #onetrust-policy .banner-header { 
      margin-top: 22px !important;
      margin-left: 30px !important;
      background-image: url("https://cdn.cookielaw.org/logos/b1d060cc-fa13-4e1e-8a5e-fd705963d55b/11da4229-abbc-4e04-a16b-72fa8f10257c/d7763e0a-3f92-4783-81ae-ad2648d6138c/logo_gmx.png") !important;
    }
    #onetrust-pc-sdk .ot-pc-header { 
      padding-top: 22px !important;
    }
    #onetrust-banner-sdk p { 
      font-size: .913em !important;
    }
    #onetrust-pc-sdk .ot-chkbox label::before, #onetrust-pc-sdk .ot-chkbox input:checked~label::before { 
      background-color: #999999 !important;
      border: 1px solid #999999 !important;
    }
    #onetrust-pc-sdk #ot-pc-title { 
      margin-top: 20px !important;
    }

    div[data-optanongroupid="C0012"] #ot-desc-id-C0012 a {
      color: #3678ED;
    }
  </style>
  <link as="font" crossorigin="anonymous" href="https://s.uicdn.com/mailint/9.2249.0/assets/webfonts/fonts/droid-normal.woff2" rel="preload" type="font/woff2" />

  <script type="text/javascript">
    /*! js-cookie v3.0.0-rc.1 | MIT */
    !function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self,function(){var n=e.Cookies,r=e.Cookies=t();r.noConflict=function(){return e.Cookies=n,r}}())}(this,function(){"use strict";function e(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}var t={read:function(e){return e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}};return function n(r,o){function i(t,n,i){if("undefined"!=typeof document){"number"==typeof(i=e({},o,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),t=encodeURIComponent(t).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape),n=r.write(n,t);var c="";for(var u in i)i[u]&&(c+="; "+u,!0!==i[u]&&(c+="="+i[u].split(";")[0]));return document.cookie=t+"="+n+c}}return Object.create({set:i,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split("; "):[],o={},i=0;i<n.length;i++){var c=n[i].split("="),u=c.slice(1).join("=");'"'===u[0]&&(u=u.slice(1,-1));try{var f=t.read(c[0]);if(o[f]=r.read(u,f),e===f)break}catch(e){}}return e?o[e]:o}},remove:function(t,n){i(t,"",e({},n,{expires:-1}))},withAttributes:function(t){return n(this.converter,e({},this.attributes,t))},withConverter:function(t){return n(e({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(o)},converter:{value:Object.freeze(r)}})}(t,{path:"/"})}); //NOSONAR
  </script>

  <script type="text/javascript">
    /**
     * Inject some brand dependend stylings
     */
     function injectCSS(rule) {
      var css = document.createElement('style');
      css.type = 'text/css';
      css.appendChild(document.createTextNode(rule));
      document.head.appendChild(css);
    }
  </script>

  <script type="text/javascript">
    // Config
    var tcfVers = 'v1';
    var pppVers = 'v1';
    var pppBasePath = 'https://s.uicdn.com/permission/live/' + pppVers;
    var tcfBasePath = 'https://s.uicdn.com/tcf/live/' + tcfVers;

    if (typeof window.Promise !== 'function') {
      document.write('<script src="' + pppBasePath + '/ppp/js/polyfills/promise.min.js"><\/script>');
    }
    document.write('<script src="' + tcfBasePath + '/js/tcf-api.js"><\/script>');
    document.write('<script src="' + pppBasePath + '/ppp/js/permission-layer.min.js"><\/script>');

    // Sentry
    function initSentry() {

      if (!window.Sentry || typeof window.Sentry === 'undefined') {
        window.Sentry = {};
        return;
      }

      // Settings
      var sentryStage = 'live' || 'live';
      var sentryDsn   = `https://daec9f1722cb6894b388eecfe999bbaf@trace-proxy.mam.dev/advertisement/29`;
      var sentryEnv   = sentryStage !== 'live' ? 'QA' : 'Production';
      var sentryVers  = window.PermissionLayer.version || '-1';
      var sentryDebug = sentryStage !== 'live' ? true : false;

      try {
        Sentry.init({
          dsn: sentryDsn,
          environment: sentryEnv,
          release: sentryVers,
          debug: sentryDebug,
          denyUrls: [
            /moz-extension/i,
            /extension/i,
            /chrome:/i,
            /file:/i,
            /127\.0\.0\.1/i,
            /uim\/permission\/onetrust\/gmxfr\/live/i
          ]
        });

        if (Sentry && typeof Sentry.setTag === 'function') {
          Sentry.setTag('campaignId', '6200738');
          Sentry.setTag('bannerId', '18774479');
          Sentry.setTag('portal', 'gmxfr');
          Sentry.setTag('category', 'homepage');
          Sentry.setTag('section', 'homepage');
          Sentry.setTag('forcedMode', ('' !== '' ? true : false));
        }

        if (Sentry && typeof Sentry.setUser === 'function' && '' !== '') {
          Sentry.setUser({
            id: ''
          });
        }

      } catch (ex) {
        window.Sentry = {};
        console.error(ex);
      }
    }

    // OneTrust
    // Stage Mapping and version currently not used for the basePathMapping!
    var oneTrustVers = 'v1';
    var oneTrustStageMapping = {
      'qa': 'qa',
      'live': 'live'
    };

    if (typeof oneTrustStageMapping['live'] !== 'undefined') {
      oneTrustStageMapping = oneTrustStageMapping['live'];
    } else {
      oneTrustStageMapping = oneTrustStageMapping['live'];
    }

    var oneTrustBasePathMapping = {
      'gmxes': 'https://dl.gmx.es',
      'gmxfr': 'https://dl.gmx.fr',
      'gmxcouk': 'https://dl.gmx.co.uk',
      'gmxcom': 'https://dl.gmx.com',
      'mailcom': 'https://dl.mail.com'
    };
 
    if (typeof oneTrustBasePathMapping['gmxfr'] !== 'undefined') {
      oneTrustBasePathMapping = oneTrustBasePathMapping['gmxfr'] + '/uim/permission/onetrust/gmxfr/';
    } else {
      oneTrustBasePathMapping = oneTrustBasePathMapping['gmxcom'] + '/uim/permission/onetrust/gmxcom/';
    }

    // OneTrust Script 
    document.write('<script src="' + oneTrustBasePathMapping + oneTrustStageMapping + '/scripttemplates/otSDKStub.js" data-document-language="true" type="text/javascript" charset="UTF-8" data-domain-script="f6f7c71d-2671-4f99-8f06-ad3a02bdef30"><\/script>');
// document.write('<script src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" data-document-language="true" type="text/javascript" charset="UTF-8" data-domain-script="f6f7c71d-2671-4f99-8f06-ad3a02bdef30-test" ><\/script>');
  </script>
  <script src="https://s.uicdn.com/fd/sentry/v7/bundle.tracing.min.js" onload="initSentry()" onerror="initSentry()"></script>

  <script type="text/javascript" charset="utf-8">
    // Cookie Handling for OneTrust
    var optanonConsent;
    var cookieGroups;
    var updatePromise;
    var uiTcfApi = window.__tcfapi;
    // Flag to surpress another window.PermissionLayer.connect call
    var connected = false;
    //tracking queue used for brain
    var trackingQueue = {
      section: '',
      clickname: '',
      addPurposes: false
    };
    var portal = 'gmxfr';

    function getCookie(cookieName) {
      return Cookies.get(cookieName) || '';
    }

    function setCookie(cookieName, cookieValue, exDays) {
      Cookies.set(cookieName, cookieValue, {
        expires: exDays,
        secure: true,
        sameSite: 'none',
        path: '/'
      });
    }

    function deleteCookie(cookieName) {
      setCookie(cookieName, null, -1);
    }

    /**
     * Delete multiple cookies from onetrust (which we don't need)
     */
    function deleteCookies() {
      const cookieArr = [
        'OptanonAlertBoxClosed',
        'OptanonConsent',
        'eupubconsent-v2',
        'OneTrustConsent',
        'pctrk',
        '__cfduid',
        '__onetrust__'
      ];

      for (const element of cookieArr) {
        deleteCookie(element);
      }
    }

    /**
     * However the PPP cookie check can be bypassed, we need another check, if cookies can be written here too
     */
    function isCookieWriteable() {
      try {
        if (!navigator.cookieEnabled) { return false; }

        setCookie('__onetrust__', '1', 1);
        return getCookie('__onetrust__') === '1';
      } catch (ex) { return false; }
    }

    /**
     * Free up TCF API namespace in window
     */
    function resetTcfApiNamespace() {
      window.__tcfapi = undefined;
      delete window.__tcfapi;
    }

    /**
     * Give the browser something to do to allow tracking requests to finish on unload / before unload
     */
    function busyWork() {
      var el = document.createElement('style');
      document.head.appendChild(el);
      document.head.getBoundingClientRect();

      // Delete OneTrust TCF API
      window.OneTrust = undefined;
      delete window.OneTrust;

      // Important to delete the unnecessary OneTrust cookies
      deleteCookies();
    }
    window.addEventListener('unload', busyWork);
    window.addEventListener('beforeunload', busyWork);

    /**
     * OneTrust Documentation: https://my.onetrust.com/s/article/UUID-185d63b9-1094-a9d3-e684-bb1f155ae6ad
     */
    (function(window, OneTrustStub) {
      window.PermissionLayer.getParameters().then(function(parameters) {
        if (
          parameters &&
          parameters.hasOwnProperty('consentParameters') && 
          (
            !parameters.consentParameters.tcfLayerMode || 
            parameters.consentParameters.tcfLayerMode !== 'resurface'
          )
        ) {
          return;
        }
        injectCSS('#onetrust-banner-sdk { display: none; }')
        let openPreferenceCenter = setInterval(() => {
          let btn = document.querySelector('#onetrust-pc-btn-handler');
          if (btn) {
            btn.click();
            clearInterval(openPreferenceCenter);
          }
        }, 100);
      });

      /**
       * normalize purposes for braintracking also missing consents
       * @param  {array}  purposes  given purposes by user
       * @param  {string} prefix    braintracking prefix, see https://mam-confluence.1and1.com/x/JKLtC
       * @param  {int}    length    amount of purpose if all set to true
       * @return {object}           purposes and their according values as string
       */
      function getPurposeAndValue(purposes, prefix, length) {
        var permission = {
          purpose: [],
          purposevalue: []
        }

        if (prefix === 'sf') {
          if (Object.keys(purposes).length === 0) { purposes = {2:0}; }
          for (var key in purposes) {
            permission.purpose.push(prefix+key);
            (purposes[key]) ? permission.purposevalue.push(1) : permission.purposevalue.push(0);
          }
        } else {
          for (var i=1; i<=length; i++) {
            permission.purpose.push(prefix+i);
            (purposes[i]) ? permission.purposevalue.push(1) : permission.purposevalue.push(0);
          }
        }

        permission.purpose = permission.purpose.join(',');
        permission.purposevalue = permission.purposevalue.join(',');

        return permission;
      }

      /**
       * build tracking url and fire a pixel
       * @param  {string} section   defined section name
       * @param  {string} clickname defined click name
       */
      function fireBrainTracking(section, clickname, addPurposes) {
        return new Promise(function(resolve, reject) {

          if (!section || typeof section !== 'string') { return resolve(); }

          let variant;
          variant = 'reject_button_swap';
          var country = {
            'gmxes': 'es',
            'gmxfr': 'fr',
            'gmxcouk': 'uk',
            'gmxcom': 'us',
            'mailcom': 'us'
          };
          country = country['gmxfr'] || 'unknown';

          var permission = {
            purpose:'',
            purposevalue:''
          };

          if (addPurposes) {
            __tcfapi('addEventListener',2,function(response){
              var purpose = getPurposeAndValue(response.purpose.consents, 'pc', 11);
              var publisher = getPurposeAndValue(response.publisher.consents, 'pubc', 11);
  
              delete response.specialFeatureOptins[1]
              var specialFeature = getPurposeAndValue(response.specialFeatureOptins, 'sf', Object.keys(response.specialFeatureOptins).length);
  
              permission.purpose = purpose.purpose + ',' + publisher.purpose + ',' + specialFeature.purpose;
              permission.purposevalue = purpose.purposevalue + ',' + publisher.purposevalue + ',' + specialFeature.purposevalue;
            });
          }

          var url = 'https://nct.ui-portal.de/gmxfr/gmxfr/s?';
              url += 'name=' + section;
              url += '&country=' + country;
              url += '&context=homepage';
              url += '&version=1.98.8';
              url += '&appversion=1.98.8';
              if (variant) { url += '&var=' + variant; }
              url += '&dclass=b';
              url += '&lclass=b';
              url += '&campaign=18774479';
              url += '&netid=' + 0;
              if (clickname) {
                url += '&clickname=' + clickname;
              }
              if (addPurposes) {
                url += '&purpose=' + permission.purpose;
                url += '&purposevalue=' + permission.purposevalue;
              }
              url += '&ts='+(new Date().getTime());
              url += '&rand='+parseInt(Math.random()*100000, 10);

          var pixel = new Image(1, 1);
          pixel.src = url;
          pixel.onload = pixel.onerror = function() {
            return resolve();
          }
        });
      }

      async function sendDeletion(ppid) {
        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', `https://securepubads.g.doubleclick.net/user_data_deletion?ppid=${ppid}&iu=139364342`);
          xhr.onload = xhr.onerror = function() {
            resolve(xhr.status);
          }
          xhr.send();
        });
      }

      function hasConsent(userConsent, consentToCheck) {
        if (userConsent.consents) { userConsent = userConsent.consents; }
        userConsent = Object.keys(userConsent).filter(function(i) { return userConsent[i]; }).map(function(i) { return parseInt(i); });
        return consentToCheck.reduce(function(result, i) {
          return result && userConsent.indexOf(i) !== -1;
        }, true);
      }

      async function removeGoogleConsent() {
        if (!Cookies.get('tp_id')) { return; }

        await new Promise(function(resolve, reject) {
          uiTcfApi('addEventListener', 2, async function(consent) {
            if (hasConsent(consent.purpose, [1, 2, 3, 4, 7]) && consent.vendor.consents[755]) { return resolve(); }

            const ppid = Cookies.get('tp_id').replace(/[_-]/g, "").slice(-55,-13);
            const response = await sendDeletion(ppid);
            return resolve(response);
          });
        });
      }

      /**
       * Finish PPP lifecycle
       */
      function finish() {
        removeGoogleConsent()
        .then(() => fireBrainTracking(trackingQueue.section, trackingQueue.clickname, trackingQueue.addPurposes))
        .then(() => {
          if (updatePromise) {
            return updatePromise.then(() => window.PermissionLayer.complete());
          } else {
            window.PermissionLayer.complete({pppFinished: true});
          }
        }).catch(ex => {
          if (typeof window.Sentry.captureMessage === 'function') {
            window.Sentry.captureMessage({
              message: "Error in finish",
              exception: ex || 'No exception available'
            });
          } else {
            console.error("Error in finish", ex);
          }
          window.PermissionLayer.complete({pppFinished: true});
        });
      }

      /**
       * Capture exceptions and try to log them into sentry
       */
      function captureException(msg, ex) {
        if (typeof window.Sentry.captureMessage === 'function') {
          window.Sentry.captureMessage({
            message: msg,
            exception: ex || 'No exception available'
          });
        } else {
          console.error(msg, ex);
        }
        finish();
      }

      /**
      * Connect to PPP
      */
      function connect() {
        // Set flag to prevent multiple connect() to PPP
        connected = true;

        try {
          window.PermissionLayer.connect({
            fullsize: true,
            trackingData: {
              cont_campaign_banner: '6200738_18774479',
              cont_layer_name: 'onetrust',
            }
          });
        } catch (ex) { captureException('Failed to connect from Layer to PPP:', ex); }
      }

      /** @TODO usage of mutation observer */
      function modifyVendorList() {
        try{
          var listHandlerInterVal = setInterval(function(){
            if (document.querySelector('#ot-selall-gnven-handler') !== null) {
              document.querySelector('#ot-selall-gnven-handler').click();
              document.querySelector('#ot-selall-gnven-handler').addEventListener('click', function(){
                  setTimeout(function(){
                      document.querySelector('#ot-selall-gnven-handler').click();
                      document.querySelector('#ot-selall-gnven-handler').click();
                  },50);
              });
              clearInterval(listHandlerInterVal);
            }
          },100)
        } catch(ex) { console.log('Failed to modify other Vendors:', ex); }
      }

      /**
       * Some dirty workaround here to set target to _blank when clicking the privacy policy link to not open in the same tab
       */
      /** @TODO usage of mutation observer */
      function modifyPrivacyPolicyUrl() {
        try {
          var checkPrivacyPolicyLink = setInterval(function() {
            var policyLinkElement = document.querySelector('#onetrust-policy-text > a');
            if (policyLinkElement !== null) {
              policyLinkElement.setAttribute('target','_blank');
              clearInterval(checkPrivacyPolicyLink);
            }
          }, 100);
        } catch (ex) { console.log('Failed to modify privacy policy URL with reason:', ex); }
      }
      /**
       * Some dirty workaround here to set braintracking on buttons
       */
      /** @TODO usage of mutation observer */
      function addBrainTracking() {
        const addListener = (selector, section, clickname, queueClickname) => {
          const interval = setInterval(() => {
            const element = document.querySelector(selector);

            if(element) {
              element.addEventListener('click', () => {
                try {
                  fireBrainTracking(section, clickname);
                } catch (ex) { captureException('Failed to fire brain pixel on button listener:', ex); }
                if(queueClickname) {
                  trackingQueue = {
                    section: 'permission.tcfoverall.event.purposes',
                    clickname: queueClickname,
                    addPurposes: true
                  }
                }
              });
              clearInterval(interval);
            }
          },100)
        }

        const trackings = [
          ['#onetrust-accept-btn-handler', 'permission.tcfoverall.event.startpurposes.button.save-all-conditionally', null, 'startpurposes.button.save-all-conditionally'],
          ['#onetrust-pc-btn-handler', 'permission.tcfoverall.pi.purposesdetails','startpurposes.button.edit-purpose-settings', null],
          ['.save-preference-btn-handler', 'permission.tcfoverall.event.purposesdetails.button.save-purpose-settings', null, 'purposesdetails.button.save-purpose-settings'],
          ['#accept-recommended-btn-handler', 'permission.tcfoverall.event.purposesdetails.button.save-all', null, 'purposesdetails.button.save-all'],
          ['#onetrust-reject-all-handler', 'permission.tcfoverall.event.startpurposes.button.deny', null, 'startpurposes.button.deny'], //deny button instead of textlink
          ['.ot-pc-refuse-all-handler', 'permission.tcfoverall.event.purposesdetails.button.deny', null, 'purposesdetails.button.deny']
        ]

        trackings.forEach(([selector, section, clickname, queueClickname]) => {
          addListener(selector, section, clickname, queueClickname);
        })

      }

      /**
       * Complete processing before calling complete()
       */
      function complete(tcData) {
        try {

          // Get the exposted TCString Utils from the UI TCF API
          uiTcfApi('getTCStringUtil', 2, function(util) {
            // Set the baseUrl and the latest file name to fetch the correct vendorlist from OneTrust
            util.GVL.baseUrl = 'https://cdn.cookielaw.org/vendorlist/';
            util.GVL.latestFilename = 'iab2V2Data.json';

            // Instantiate new instance of GlobalVendorList
            const gvl = new util.GVL('LATEST');
            gvl.readyPromise.then(function() {
              const TCString = util.TCString;
              const newRawTCData = TCString.decode(tcData.tcString);
              newRawTCData.publisherConsents = newRawTCData.purposeConsents;

              optanonConsent = getCookie('OptanonConsent');
              // Split out the consent groups
              cookieGroups = (optanonConsent.match(/(?:^|&)groups=([^&]*)/) || [0, ''])[1];
              // Split out the google consent group explicit
              const googlePermission = ((cookieGroups.match(/(?:^|,)C0099:([^,]*)/) || [0, ''])[1] == 0) ? false : true;
              const gaPermission = ((optanonConsent.match(/(?:^|,|&)genVendors=V3:([^,]*)/) || [0, ''])[1] == 0) ? false : true;
              const tracking = ((cookieGroups.match(/(?:^|,)C0012:([^,]*)/) || [0, ''])[1] == 0) ? false : true;

              googlePermission ? newRawTCData.publisherCustomConsents.set([1]) : newRawTCData.publisherCustomConsents.unset([1]);
              gaPermission ? newRawTCData.publisherCustomConsents.set([3]) : newRawTCData.publisherCustomConsents.unset([3]);
              tracking ? newRawTCData.publisherCustomConsents.set([10]) : newRawTCData.publisherCustomConsents.unset([10]);

              newRawTCData.numCustomPurposes = newRawTCData.publisherCustomConsents.maxId;
              newRawTCData.gvl = gvl;
              // set lastUpdated to current date as on resurface this won't be updated
              newRawTCData.lastUpdated = newRawTCData.created = new Date(Date.UTC(new Date().getUTCFullYear(), new Date().getUTCMonth(), new Date().getUTCDate()));

              const encodedTCString = TCString.encode(newRawTCData);
              tcData.tcString = encodedTCString;

              // If tcData does not contain expected data, error -> finish()
              if (!tcData || !tcData.hasOwnProperty('tcString') || !tcData.hasOwnProperty('tcfPolicyVersion')) {
                finish();
                return;
              }

              // Update PPP tcData
              updatePromise = window.PermissionLayer.updateTCData({
                tcString: tcData.tcString || '',
                tcfVersion: tcData.tcfPolicyVersion || 4,
                tcStatus: tcData.tcStatus || ''
              });

              // Call directly complete (will await the updatePromise on finish)
              finish();

            }).catch(function(reason) { captureException('OneTrust "gvl.readyPromise" failed to process:', reason); });
          });
        } catch (ex) { captureException('Failed to process "complete" with reason:', ex); }
      }

      /**
       * Initialize the great OneTrust TCF API SDK
       */
      function initOneTrust() {

        window.OneTrustStub = OneTrustStub;
        // OneTrustStub not available
        if (!window.OneTrustStub) {
          finish();
          return;
        }

        // Init OneTrustStub
        OneTrustStub.otSdkStub.intializeIabStub();

        // TCF API (initialized by the OneTrustStub) not available
        if (!window.__tcfapi) {
          captureException('OneTrust TCF API could not be initialized / not available!');
          return;
        }

        // Listens to changes on the OneTrust __tcfApi (example: TCString change)
        window.__tcfapi('addEventListener', 2, function(tcData, success) {

          // No success response from OneTrust TCF API
          if (!success) {
            captureException('OneTrust TCF API returned no success response!', tcData);
            return;
          }

          // Check if we received the events to connect() to PPP
          if (tcData.eventStatus === 'cmpuishown' || tcData.eventStatus === 'tcloaded') {

            // If not already connected (sometimes we receive the event twice) -> connect()
            if (!connected) {
              connect();
              fireBrainTracking('permission.tcfoverall.pi.startpurposes');
              modifyVendorList();
            }

          } else if (tcData.eventStatus === 'useractioncomplete') {
            // Complete processing after the user interacted with the OneTrust TCF Layer
            complete(tcData);
          } else {
            // Anything else
            finish();
          }
        });

        // Don't ask ... no really don't ask
        modifyPrivacyPolicyUrl();
        addBrainTracking();

      }

      /*
       * Initialize the layer and possibly populate it on resurface mode
       */
      function initLayer(tcString) {
        var uiResurfacePromise = new Promise(function(resolve) {
          const uiResurfaceEnabled = true;
          let uiResurfaceVendorListVersion = 225;

          if (!tcString || !uiResurfaceEnabled) { resolve(false); }

          // Get the exposed TCString Utils from the UI TCF API
          uiTcfApi('getTCStringUtil', 2, function(util) {

            // No response, no TCString attribute
            if (!util || !util.hasOwnProperty('TCString')) { resolve(false); }

            // Decode the users TCString and get it's vendorListVersion
            var encodedTCStringVendorListVersion = util.TCString.decode(tcString).vendorListVersion || -1;
            if (typeof encodedTCStringVendorListVersion !== 'number' || encodedTCStringVendorListVersion < 0) { resolve(false); }

            /** @TODO - LATER - move to top after switch */
            uiResurfaceVendorListVersion =  util.TCString.decode(tcString).policyVersion === 2 ? 225 : 110; 

            // If the users TCString vendorListVersion is lower than our expected ...
            if (encodedTCStringVendorListVersion < uiResurfaceVendorListVersion) { resolve(true); }
          });

          resolve(false);
        });

        // Wait the resurface promise to finish
        uiResurfacePromise.then(function(uiResurfaceStatus) {

          // If euconsent-v2 cookie is already available and layer is not forced
          if (!uiResurfaceStatus && (tcString && '' === '')) {
            console.log('[OneTrust]: Consent already given and layer not forced');
            finish();
            return;
          }

          // If euconsent-v2 cookie is available and the layer is forced (resurfacing mode)
          if (tcString && ('' !== '' || uiResurfaceStatus)) {

            try {

              // Important to work with our UI TCF API here
              uiTcfApi('addEventListener', 2, function(response) {
                setCookie('eupubconsent-v2', tcString, 365); // Set helper cookie for oneTrust to be able to show the user the already given consents in resurface mode

                let groups = new Array;
                if (response.publisher.customPurpose.consents[1]) { groups.push('C0099:1'); }
                if (response.publisher.customPurpose.consents[10]) { groups.push('C0012:1'); }
                if (hasConsent(response.publisher.consents, [1,2,3,4,5,6,7,8,9,10,11])) { groups.push('STACK42:1') }
                
                if (groups.length > 0) {
                  setCookie('OptanonConsent', 'groups=' + groups.join(','), 365);
                }
              });
            } catch (ex) { captureException('Failed to process "initLayer" with reason:', ex); }
          }

          console.log(`[OneTrust]: Layer is shown because: ${tcString && uiResurfaceStatus ? 'resurfacing' : '' !== '' ? 'forced mode' : 'no consent'}`);

          // Initialize the crazy stuff from OneTrust
          initOneTrust();

        }).catch(function(error) { captureException('Failed to process uiResurfacing with error:', error); });
      }

      /**
       * Initialize the processing
       */
      function init() {
        // UI TCF API could not be copied / not available
        if (!uiTcfApi || typeof uiTcfApi !== 'function') { return; }
        if (!isCookieWriteable()){ return; }
        
        deleteCookies();
        // Reset TCF API namespace in window to let OneTrust assign their instance
        resetTcfApiNamespace();

        // Get the value of euconsent-v2 cookie (if available)
        var tcString = getCookie('euconsent-v2');
        initLayer(tcString);
      }

      init();
    })(window, window.OneTrustStub);

  </script>
</head>
<body>
  <script>
    (()=>{
      function handleElementAppearance(mutationsList, observer) {
          for(const mutation of mutationsList) {
              if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                const targetElement = document.querySelector('#onetrust-consent-sdk');
                const addedNode = mutation.addedNodes[0];
                if (addedNode === targetElement) {
                      observer.disconnect(); // Observer deaktivieren
                      const container = document.querySelector('.banner-actions-container');
                      const accept = document.querySelector('#onetrust-accept-btn-handler');
                      const edit = document.querySelector('#onetrust-pc-btn-handler');
                      if (!container || !accept || !edit) { window.PermissionLayer.complete({pppFinished: true}); return; }
                      container.style.width = window.matchMedia('(max-width: 425px)').matches ? '100%' : 'initial';
                      edit.style.maxWidth = 'initial';
                      const textlink = document.querySelector('#onetrust-close-btn-container').firstChild;
                      if (!textlink) { window.PermissionLayer.complete({pppFinished: true}); return; }
                      textlink.innerText = 'Tout refuser';
                      textlink.id = 'onetrust-reject-all-handler';
                      
                      container.insertBefore(textlink, accept);
                      edit.style.float = 'left';

                      const grp = document.querySelector('#onetrust-button-group');
                      const reject = document.querySelector('#onetrust-reject-all-handler');
                      if (!grp || !reject) { window.PermissionLayer.complete({pppFinished: true}); return; }

                      reject.style.float = 'left';
                      grp.appendChild(reject);
                      container.insertBefore(edit, accept);

                      const ariaElements = [];
                      const links = document.querySelectorAll('a');
                      const buttons = document.querySelectorAll('button');
                      ariaElements.push(links);
                      ariaElements.push(buttons);
                      ariaElements.forEach(e => { 
                        e.forEach(elem => {
                          elem.ariaLabel === '' || elem.ariaLabel === null ? elem.ariaLabel = elem.innerHTML : elem.ariaLabel;
                          elem.role === '' || elem.role === null ? elem.localName === 'a' ? elem.role = 'link' : elem.localName === 'button' ? elem.role = 'button' : '' : '';
                        }); 
                      });
                      
                      break;
                  }
              }
          }
      }      
      const observer = new MutationObserver(handleElementAppearance);
      const observerOptions = { childList: true };
      const parentElement = document.body;
      observer.observe(parentElement, observerOptions);
    })()
  </script>
</body>
</html>